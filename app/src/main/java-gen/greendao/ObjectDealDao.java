package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.ObjectDeal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_DEAL.
*/
public class ObjectDealDao extends AbstractDao<ObjectDeal, Long> {

    public static final String TABLENAME = "OBJECT_DEAL";

    /**
     * Properties of entity ObjectDeal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Deal_id = new Property(1, Long.class, "deal_id", false, "DEAL_ID");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Image_thumbnail = new Property(3, String.class, "image_thumbnail", false, "IMAGE_THUMBNAIL");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Start_at = new Property(6, String.class, "start_at", false, "START_AT");
        public final static Property End_at = new Property(7, String.class, "end_at", false, "END_AT");
        public final static Property Max_claim = new Property(8, Integer.class, "max_claim", false, "MAX_CLAIM");
        public final static Property Original_price = new Property(9, Float.class, "original_price", false, "ORIGINAL_PRICE");
        public final static Property Purchase_now_price = new Property(10, Float.class, "purchase_now_price", false, "PURCHASE_NOW_PRICE");
        public final static Property Outlet_id = new Property(11, Long.class, "outlet_id", false, "OUTLET_ID");
        public final static Property Merchant_id = new Property(12, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Deal_type = new Property(13, Integer.class, "deal_type", false, "DEAL_TYPE");
        public final static Property Description = new Property(14, String.class, "description", false, "DESCRIPTION");
        public final static Property Terms = new Property(15, String.class, "terms", false, "TERMS");
        public final static Property F_claimed = new Property(16, Boolean.class, "f_claimed", false, "F_CLAIMED");
        public final static Property F_call_dibs = new Property(17, Boolean.class, "f_call_dibs", false, "F_CALL_DIBS");
        public final static Property Duration_type = new Property(18, String.class, "duration_type", false, "DURATION_TYPE");
        public final static Property K_rest_claim = new Property(19, Integer.class, "k_rest_claim", false, "K_REST_CLAIM");
        public final static Property Outlets = new Property(20, String.class, "outlets", false, "OUTLETS");
        public final static Property K_likes = new Property(21, Integer.class, "k_likes", false, "K_LIKES");
        public final static Property K_unlikes = new Property(22, Integer.class, "k_unlikes", false, "K_UNLIKES");
        public final static Property F_yay = new Property(23, Boolean.class, "f_yay", false, "F_YAY");
        public final static Property F_nay = new Property(24, Boolean.class, "f_nay", false, "F_NAY");
        public final static Property Claim_validity = new Property(25, String.class, "claim_validity", false, "CLAIM_VALIDITY");
        public final static Property Organization_name = new Property(26, String.class, "organization_name", false, "ORGANIZATION_NAME");
        public final static Property Is_exclusive = new Property(27, Boolean.class, "is_exclusive", false, "IS_EXCLUSIVE");
        public final static Property K_deals_by_outlet = new Property(28, Integer.class, "k_deals_by_outlet", false, "K_DEALS_BY_OUTLET");
        public final static Property Refer_deal_ids = new Property(29, String.class, "refer_deal_ids", false, "REFER_DEAL_IDS");
        public final static Property F_liked = new Property(30, Boolean.class, "f_liked", false, "F_LIKED");
        public final static Property Logo_image_url = new Property(31, String.class, "logo_image_url", false, "LOGO_IMAGE_URL");
        public final static Property Ref_merchant_id = new Property(32, Long.class, "ref_merchant_id", false, "REF_MERCHANT_ID");
        public final static Property FromDealFollowing = new Property(33, Boolean.class, "fromDealFollowing", false, "FROM_DEAL_FOLLOWING");
        public final static Property Uuid = new Property(34, String.class, "uuid", false, "UUID");
        public final static Property Group_id = new Property(35, Integer.class, "group_id", false, "GROUP_ID");
        public final static Property Group_name = new Property(36, String.class, "group_name", false, "GROUP_NAME");
        public final static Property DealReferId = new Property(37, Long.class, "dealReferId", false, "DEAL_REFER_ID");
    };

    private DaoSession daoSession;

    private Query<ObjectDeal> objectDeal_Refer_deal_infosQuery;

    public ObjectDealDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectDealDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_DEAL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DEAL_ID' INTEGER," + // 1: deal_id
                "'IMAGE' TEXT," + // 2: image
                "'IMAGE_THUMBNAIL' TEXT," + // 3: image_thumbnail
                "'TITLE' TEXT," + // 4: title
                "'TYPE' TEXT," + // 5: type
                "'START_AT' TEXT," + // 6: start_at
                "'END_AT' TEXT," + // 7: end_at
                "'MAX_CLAIM' INTEGER," + // 8: max_claim
                "'ORIGINAL_PRICE' REAL," + // 9: original_price
                "'PURCHASE_NOW_PRICE' REAL," + // 10: purchase_now_price
                "'OUTLET_ID' INTEGER," + // 11: outlet_id
                "'MERCHANT_ID' INTEGER," + // 12: merchant_id
                "'DEAL_TYPE' INTEGER," + // 13: deal_type
                "'DESCRIPTION' TEXT," + // 14: description
                "'TERMS' TEXT," + // 15: terms
                "'F_CLAIMED' INTEGER," + // 16: f_claimed
                "'F_CALL_DIBS' INTEGER," + // 17: f_call_dibs
                "'DURATION_TYPE' TEXT," + // 18: duration_type
                "'K_REST_CLAIM' INTEGER," + // 19: k_rest_claim
                "'OUTLETS' TEXT," + // 20: outlets
                "'K_LIKES' INTEGER," + // 21: k_likes
                "'K_UNLIKES' INTEGER," + // 22: k_unlikes
                "'F_YAY' INTEGER," + // 23: f_yay
                "'F_NAY' INTEGER," + // 24: f_nay
                "'CLAIM_VALIDITY' TEXT," + // 25: claim_validity
                "'ORGANIZATION_NAME' TEXT," + // 26: organization_name
                "'IS_EXCLUSIVE' INTEGER," + // 27: is_exclusive
                "'K_DEALS_BY_OUTLET' INTEGER," + // 28: k_deals_by_outlet
                "'REFER_DEAL_IDS' TEXT," + // 29: refer_deal_ids
                "'F_LIKED' INTEGER," + // 30: f_liked
                "'LOGO_IMAGE_URL' TEXT," + // 31: logo_image_url
                "'REF_MERCHANT_ID' INTEGER," + // 32: ref_merchant_id
                "'FROM_DEAL_FOLLOWING' INTEGER," + // 33: fromDealFollowing
                "'UUID' TEXT," + // 34: uuid
                "'GROUP_ID' INTEGER," + // 35: group_id
                "'GROUP_NAME' TEXT," + // 36: group_name
                "'DEAL_REFER_ID' INTEGER);"); // 37: dealReferId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_DEAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectDeal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long deal_id = entity.getDeal_id();
        if (deal_id != null) {
            stmt.bindLong(2, deal_id);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String image_thumbnail = entity.getImage_thumbnail();
        if (image_thumbnail != null) {
            stmt.bindString(4, image_thumbnail);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String start_at = entity.getStart_at();
        if (start_at != null) {
            stmt.bindString(7, start_at);
        }
 
        String end_at = entity.getEnd_at();
        if (end_at != null) {
            stmt.bindString(8, end_at);
        }
 
        Integer max_claim = entity.getMax_claim();
        if (max_claim != null) {
            stmt.bindLong(9, max_claim);
        }
 
        Float original_price = entity.getOriginal_price();
        if (original_price != null) {
            stmt.bindDouble(10, original_price);
        }
 
        Float purchase_now_price = entity.getPurchase_now_price();
        if (purchase_now_price != null) {
            stmt.bindDouble(11, purchase_now_price);
        }
 
        Long outlet_id = entity.getOutlet_id();
        if (outlet_id != null) {
            stmt.bindLong(12, outlet_id);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(13, merchant_id);
        }
 
        Integer deal_type = entity.getDeal_type();
        if (deal_type != null) {
            stmt.bindLong(14, deal_type);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(15, description);
        }
 
        String terms = entity.getTerms();
        if (terms != null) {
            stmt.bindString(16, terms);
        }
 
        Boolean f_claimed = entity.getF_claimed();
        if (f_claimed != null) {
            stmt.bindLong(17, f_claimed ? 1l: 0l);
        }
 
        Boolean f_call_dibs = entity.getF_call_dibs();
        if (f_call_dibs != null) {
            stmt.bindLong(18, f_call_dibs ? 1l: 0l);
        }
 
        String duration_type = entity.getDuration_type();
        if (duration_type != null) {
            stmt.bindString(19, duration_type);
        }
 
        Integer k_rest_claim = entity.getK_rest_claim();
        if (k_rest_claim != null) {
            stmt.bindLong(20, k_rest_claim);
        }
 
        String outlets = entity.getOutlets();
        if (outlets != null) {
            stmt.bindString(21, outlets);
        }
 
        Integer k_likes = entity.getK_likes();
        if (k_likes != null) {
            stmt.bindLong(22, k_likes);
        }
 
        Integer k_unlikes = entity.getK_unlikes();
        if (k_unlikes != null) {
            stmt.bindLong(23, k_unlikes);
        }
 
        Boolean f_yay = entity.getF_yay();
        if (f_yay != null) {
            stmt.bindLong(24, f_yay ? 1l: 0l);
        }
 
        Boolean f_nay = entity.getF_nay();
        if (f_nay != null) {
            stmt.bindLong(25, f_nay ? 1l: 0l);
        }
 
        String claim_validity = entity.getClaim_validity();
        if (claim_validity != null) {
            stmt.bindString(26, claim_validity);
        }
 
        String organization_name = entity.getOrganization_name();
        if (organization_name != null) {
            stmt.bindString(27, organization_name);
        }
 
        Boolean is_exclusive = entity.getIs_exclusive();
        if (is_exclusive != null) {
            stmt.bindLong(28, is_exclusive ? 1l: 0l);
        }
 
        Integer k_deals_by_outlet = entity.getK_deals_by_outlet();
        if (k_deals_by_outlet != null) {
            stmt.bindLong(29, k_deals_by_outlet);
        }
 
        String refer_deal_ids = entity.getRefer_deal_ids();
        if (refer_deal_ids != null) {
            stmt.bindString(30, refer_deal_ids);
        }
 
        Boolean f_liked = entity.getF_liked();
        if (f_liked != null) {
            stmt.bindLong(31, f_liked ? 1l: 0l);
        }
 
        String logo_image_url = entity.getLogo_image_url();
        if (logo_image_url != null) {
            stmt.bindString(32, logo_image_url);
        }
 
        Long ref_merchant_id = entity.getRef_merchant_id();
        if (ref_merchant_id != null) {
            stmt.bindLong(33, ref_merchant_id);
        }
 
        Boolean fromDealFollowing = entity.getFromDealFollowing();
        if (fromDealFollowing != null) {
            stmt.bindLong(34, fromDealFollowing ? 1l: 0l);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(35, uuid);
        }
 
        Integer group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindLong(36, group_id);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(37, group_name);
        }
 
        Long dealReferId = entity.getDealReferId();
        if (dealReferId != null) {
            stmt.bindLong(38, dealReferId);
        }
    }

    @Override
    protected void attachEntity(ObjectDeal entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectDeal readEntity(Cursor cursor, int offset) {
        ObjectDeal entity = new ObjectDeal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // deal_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image_thumbnail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // start_at
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // end_at
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // max_claim
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // original_price
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // purchase_now_price
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // outlet_id
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // merchant_id
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // deal_type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // description
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // terms
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // f_claimed
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // f_call_dibs
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // duration_type
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // k_rest_claim
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // outlets
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // k_likes
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // k_unlikes
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // f_yay
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // f_nay
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // claim_validity
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // organization_name
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // is_exclusive
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // k_deals_by_outlet
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // refer_deal_ids
            cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0, // f_liked
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // logo_image_url
            cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32), // ref_merchant_id
            cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0, // fromDealFollowing
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // uuid
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // group_id
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // group_name
            cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37) // dealReferId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectDeal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeal_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage_thumbnail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStart_at(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEnd_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMax_claim(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setOriginal_price(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setPurchase_now_price(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setOutlet_id(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setMerchant_id(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setDeal_type(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setDescription(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTerms(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setF_claimed(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setF_call_dibs(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setDuration_type(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setK_rest_claim(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setOutlets(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setK_likes(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setK_unlikes(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setF_yay(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setF_nay(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setClaim_validity(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOrganization_name(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIs_exclusive(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setK_deals_by_outlet(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setRefer_deal_ids(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setF_liked(cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0);
        entity.setLogo_image_url(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRef_merchant_id(cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32));
        entity.setFromDealFollowing(cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0);
        entity.setUuid(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setGroup_id(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setGroup_name(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setDealReferId(cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectDeal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectDeal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "refer_deal_infos" to-many relationship of ObjectDeal. */
    public List<ObjectDeal> _queryObjectDeal_Refer_deal_infos(Long dealReferId) {
        synchronized (this) {
            if (objectDeal_Refer_deal_infosQuery == null) {
                QueryBuilder<ObjectDeal> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DealReferId.eq(null));
                objectDeal_Refer_deal_infosQuery = queryBuilder.build();
            }
        }
        Query<ObjectDeal> query = objectDeal_Refer_deal_infosQuery.forCurrentThread();
        query.setParameter(0, dealReferId);
        return query.list();
    }

}
