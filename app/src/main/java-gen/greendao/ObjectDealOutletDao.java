package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.ObjectDealOutlet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_DEAL_OUTLET.
*/
public class ObjectDealOutletDao extends AbstractDao<ObjectDealOutlet, Long> {

    public static final String TABLENAME = "OBJECT_DEAL_OUTLET";

    /**
     * Properties of entity ObjectDealOutlet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Outlet_id = new Property(1, Long.class, "outlet_id", false, "OUTLET_ID");
        public final static Property Deal_id = new Property(2, Long.class, "deal_id", false, "DEAL_ID");
        public final static Property Latitude = new Property(3, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(4, String.class, "longitude", false, "LONGITUDE");
        public final static Property Distance = new Property(5, Float.class, "distance", false, "DISTANCE");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Address1 = new Property(8, String.class, "address1", false, "ADDRESS1");
        public final static Property Address2 = new Property(9, String.class, "address2", false, "ADDRESS2");
    };


    public ObjectDealOutletDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectDealOutletDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_DEAL_OUTLET' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'OUTLET_ID' INTEGER," + // 1: outlet_id
                "'DEAL_ID' INTEGER," + // 2: deal_id
                "'LATITUDE' TEXT," + // 3: latitude
                "'LONGITUDE' TEXT," + // 4: longitude
                "'DISTANCE' REAL," + // 5: distance
                "'NAME' TEXT," + // 6: name
                "'PHONE' TEXT," + // 7: phone
                "'ADDRESS1' TEXT," + // 8: address1
                "'ADDRESS2' TEXT);"); // 9: address2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_DEAL_OUTLET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectDealOutlet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long outlet_id = entity.getOutlet_id();
        if (outlet_id != null) {
            stmt.bindLong(2, outlet_id);
        }
 
        Long deal_id = entity.getDeal_id();
        if (deal_id != null) {
            stmt.bindLong(3, deal_id);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(4, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(5, longitude);
        }
 
        Float distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(6, distance);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String address1 = entity.getAddress1();
        if (address1 != null) {
            stmt.bindString(9, address1);
        }
 
        String address2 = entity.getAddress2();
        if (address2 != null) {
            stmt.bindString(10, address2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectDealOutlet readEntity(Cursor cursor, int offset) {
        ObjectDealOutlet entity = new ObjectDealOutlet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // outlet_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // deal_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // latitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // longitude
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // distance
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // address2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectDealOutlet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOutlet_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDeal_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLatitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDistance(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectDealOutlet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectDealOutlet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
