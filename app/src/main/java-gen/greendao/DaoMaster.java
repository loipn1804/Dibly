package greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import greendao.ObjectUserDao;
import greendao.ObjectDealDao;
import greendao.ObjectDealOutletDao;
import greendao.ObjectDealMerchantDao;
import greendao.MerchantDao;
import greendao.MerchantListDao;
import greendao.OutletDao;
import greendao.CommentDao;
import greendao.MyLocationDao;
import greendao.DiscoveryDao;
import greendao.DealAvailableDao;
import greendao.DealClaimedDao;
import greendao.DealFilterDao;
import greendao.ObjectDealSearchDao;
import greendao.FollowingDao;
import greendao.TypeSearchDao;
import greendao.IndustryTypeDao;
import greendao.IndustrySearchDao;
import greendao.DiscountDao;
import greendao.PermanentDealsDao;
import greendao.NotifyDao;
import greendao.PhoneCodeDao;
import greendao.CategoryDao;
import greendao.TypeDealDao;
import greendao.ReviewDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 8): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 8;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ObjectUserDao.createTable(db, ifNotExists);
        ObjectDealDao.createTable(db, ifNotExists);
        ObjectDealOutletDao.createTable(db, ifNotExists);
        ObjectDealMerchantDao.createTable(db, ifNotExists);
        MerchantDao.createTable(db, ifNotExists);
        MerchantListDao.createTable(db, ifNotExists);
        OutletDao.createTable(db, ifNotExists);
        CommentDao.createTable(db, ifNotExists);
        MyLocationDao.createTable(db, ifNotExists);
        DiscoveryDao.createTable(db, ifNotExists);
        DealAvailableDao.createTable(db, ifNotExists);
        DealClaimedDao.createTable(db, ifNotExists);
        DealFilterDao.createTable(db, ifNotExists);
        ObjectDealSearchDao.createTable(db, ifNotExists);
        FollowingDao.createTable(db, ifNotExists);
        TypeSearchDao.createTable(db, ifNotExists);
        IndustryTypeDao.createTable(db, ifNotExists);
        IndustrySearchDao.createTable(db, ifNotExists);
        DiscountDao.createTable(db, ifNotExists);
        PermanentDealsDao.createTable(db, ifNotExists);
        NotifyDao.createTable(db, ifNotExists);
        PhoneCodeDao.createTable(db, ifNotExists);
        CategoryDao.createTable(db, ifNotExists);
        TypeDealDao.createTable(db, ifNotExists);
        ReviewDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ObjectUserDao.dropTable(db, ifExists);
        ObjectDealDao.dropTable(db, ifExists);
        ObjectDealOutletDao.dropTable(db, ifExists);
        ObjectDealMerchantDao.dropTable(db, ifExists);
        MerchantDao.dropTable(db, ifExists);
        MerchantListDao.dropTable(db, ifExists);
        OutletDao.dropTable(db, ifExists);
        CommentDao.dropTable(db, ifExists);
        MyLocationDao.dropTable(db, ifExists);
        DiscoveryDao.dropTable(db, ifExists);
        DealAvailableDao.dropTable(db, ifExists);
        DealClaimedDao.dropTable(db, ifExists);
        DealFilterDao.dropTable(db, ifExists);
        ObjectDealSearchDao.dropTable(db, ifExists);
        FollowingDao.dropTable(db, ifExists);
        TypeSearchDao.dropTable(db, ifExists);
        IndustryTypeDao.dropTable(db, ifExists);
        IndustrySearchDao.dropTable(db, ifExists);
        DiscountDao.dropTable(db, ifExists);
        PermanentDealsDao.dropTable(db, ifExists);
        NotifyDao.dropTable(db, ifExists);
        PhoneCodeDao.dropTable(db, ifExists);
        CategoryDao.dropTable(db, ifExists);
        TypeDealDao.dropTable(db, ifExists);
        ReviewDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ObjectUserDao.class);
        registerDaoClass(ObjectDealDao.class);
        registerDaoClass(ObjectDealOutletDao.class);
        registerDaoClass(ObjectDealMerchantDao.class);
        registerDaoClass(MerchantDao.class);
        registerDaoClass(MerchantListDao.class);
        registerDaoClass(OutletDao.class);
        registerDaoClass(CommentDao.class);
        registerDaoClass(MyLocationDao.class);
        registerDaoClass(DiscoveryDao.class);
        registerDaoClass(DealAvailableDao.class);
        registerDaoClass(DealClaimedDao.class);
        registerDaoClass(DealFilterDao.class);
        registerDaoClass(ObjectDealSearchDao.class);
        registerDaoClass(FollowingDao.class);
        registerDaoClass(TypeSearchDao.class);
        registerDaoClass(IndustryTypeDao.class);
        registerDaoClass(IndustrySearchDao.class);
        registerDaoClass(DiscountDao.class);
        registerDaoClass(PermanentDealsDao.class);
        registerDaoClass(NotifyDao.class);
        registerDaoClass(PhoneCodeDao.class);
        registerDaoClass(CategoryDao.class);
        registerDaoClass(TypeDealDao.class);
        registerDaoClass(ReviewDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
