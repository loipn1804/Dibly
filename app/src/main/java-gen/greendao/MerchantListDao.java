package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.MerchantList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MERCHANT_LIST.
*/
public class MerchantListDao extends AbstractDao<MerchantList, Long> {

    public static final String TABLENAME = "MERCHANT_LIST";

    /**
     * Properties of entity MerchantList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Merchant_id = new Property(1, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Organization_name = new Property(2, String.class, "organization_name", false, "ORGANIZATION_NAME");
        public final static Property Website_url = new Property(3, String.class, "website_url", false, "WEBSITE_URL");
        public final static Property Logo_image = new Property(4, String.class, "logo_image", false, "LOGO_IMAGE");
        public final static Property Industry_name = new Property(5, String.class, "industry_name", false, "INDUSTRY_NAME");
        public final static Property Cover_image = new Property(6, String.class, "cover_image", false, "COVER_IMAGE");
        public final static Property K_live_deals = new Property(7, Integer.class, "k_live_deals", false, "K_LIVE_DEALS");
        public final static Property F_follow = new Property(8, Boolean.class, "f_follow", false, "F_FOLLOW");
        public final static Property Merchant_type = new Property(9, Integer.class, "merchant_type", false, "MERCHANT_TYPE");
    };


    public MerchantListDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MERCHANT_LIST' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MERCHANT_ID' INTEGER," + // 1: merchant_id
                "'ORGANIZATION_NAME' TEXT," + // 2: organization_name
                "'WEBSITE_URL' TEXT," + // 3: website_url
                "'LOGO_IMAGE' TEXT," + // 4: logo_image
                "'INDUSTRY_NAME' TEXT," + // 5: industry_name
                "'COVER_IMAGE' TEXT," + // 6: cover_image
                "'K_LIVE_DEALS' INTEGER," + // 7: k_live_deals
                "'F_FOLLOW' INTEGER," + // 8: f_follow
                "'MERCHANT_TYPE' INTEGER);"); // 9: merchant_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MERCHANT_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MerchantList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(2, merchant_id);
        }
 
        String organization_name = entity.getOrganization_name();
        if (organization_name != null) {
            stmt.bindString(3, organization_name);
        }
 
        String website_url = entity.getWebsite_url();
        if (website_url != null) {
            stmt.bindString(4, website_url);
        }
 
        String logo_image = entity.getLogo_image();
        if (logo_image != null) {
            stmt.bindString(5, logo_image);
        }
 
        String industry_name = entity.getIndustry_name();
        if (industry_name != null) {
            stmt.bindString(6, industry_name);
        }
 
        String cover_image = entity.getCover_image();
        if (cover_image != null) {
            stmt.bindString(7, cover_image);
        }
 
        Integer k_live_deals = entity.getK_live_deals();
        if (k_live_deals != null) {
            stmt.bindLong(8, k_live_deals);
        }
 
        Boolean f_follow = entity.getF_follow();
        if (f_follow != null) {
            stmt.bindLong(9, f_follow ? 1l: 0l);
        }
 
        Integer merchant_type = entity.getMerchant_type();
        if (merchant_type != null) {
            stmt.bindLong(10, merchant_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MerchantList readEntity(Cursor cursor, int offset) {
        MerchantList entity = new MerchantList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // merchant_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // organization_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // website_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo_image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // industry_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cover_image
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // k_live_deals
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // f_follow
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // merchant_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MerchantList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMerchant_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOrganization_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWebsite_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogo_image(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIndustry_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCover_image(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setK_live_deals(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setF_follow(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setMerchant_type(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MerchantList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MerchantList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
