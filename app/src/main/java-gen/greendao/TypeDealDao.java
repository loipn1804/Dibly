package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.TypeDeal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TYPE_DEAL.
*/
public class TypeDealDao extends AbstractDao<TypeDeal, Void> {

    public static final String TABLENAME = "TYPE_DEAL";

    /**
     * Properties of entity TypeDeal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property Order = new Property(2, Integer.class, "order", false, "ORDER");
        public final static Property IsSelect = new Property(3, Boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property F_deleted = new Property(4, Integer.class, "f_deleted", false, "F_DELETED");
    };


    public TypeDealDao(DaoConfig config) {
        super(config);
    }
    
    public TypeDealDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TYPE_DEAL' (" + //
                "'ID' INTEGER," + // 0: id
                "'TEXT' TEXT," + // 1: text
                "'ORDER' INTEGER," + // 2: order
                "'IS_SELECT' INTEGER," + // 3: isSelect
                "'F_DELETED' INTEGER);"); // 4: f_deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TYPE_DEAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TypeDeal entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(3, order);
        }
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(4, isSelect ? 1l: 0l);
        }
 
        Integer f_deleted = entity.getF_deleted();
        if (f_deleted != null) {
            stmt.bindLong(5, f_deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TypeDeal readEntity(Cursor cursor, int offset) {
        TypeDeal entity = new TypeDeal( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // order
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isSelect
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // f_deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TypeDeal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrder(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIsSelect(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setF_deleted(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TypeDeal entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TypeDeal entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
