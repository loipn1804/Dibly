package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.DealClaimed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEAL_CLAIMED.
*/
public class DealClaimedDao extends AbstractDao<DealClaimed, Long> {

    public static final String TABLENAME = "DEAL_CLAIMED";

    /**
     * Properties of entity DealClaimed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Deal_id = new Property(0, Long.class, "deal_id", true, "DEAL_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Created_at = new Property(2, String.class, "created_at", false, "CREATED_AT");
        public final static Property Consumed_at = new Property(3, String.class, "consumed_at", false, "CONSUMED_AT");
        public final static Property Merchant_id = new Property(4, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Organization_name = new Property(5, String.class, "organization_name", false, "ORGANIZATION_NAME");
        public final static Property Validity = new Property(6, String.class, "validity", false, "VALIDITY");
        public final static Property F_claimed = new Property(7, Boolean.class, "f_claimed", false, "F_CLAIMED");
    };


    public DealClaimedDao(DaoConfig config) {
        super(config);
    }
    
    public DealClaimedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEAL_CLAIMED' (" + //
                "'DEAL_ID' INTEGER PRIMARY KEY ," + // 0: deal_id
                "'TITLE' TEXT," + // 1: title
                "'CREATED_AT' TEXT," + // 2: created_at
                "'CONSUMED_AT' TEXT," + // 3: consumed_at
                "'MERCHANT_ID' INTEGER," + // 4: merchant_id
                "'ORGANIZATION_NAME' TEXT," + // 5: organization_name
                "'VALIDITY' TEXT," + // 6: validity
                "'F_CLAIMED' INTEGER);"); // 7: f_claimed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEAL_CLAIMED'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DealClaimed entity) {
        stmt.clearBindings();
 
        Long deal_id = entity.getDeal_id();
        if (deal_id != null) {
            stmt.bindLong(1, deal_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(3, created_at);
        }
 
        String consumed_at = entity.getConsumed_at();
        if (consumed_at != null) {
            stmt.bindString(4, consumed_at);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(5, merchant_id);
        }
 
        String organization_name = entity.getOrganization_name();
        if (organization_name != null) {
            stmt.bindString(6, organization_name);
        }
 
        String validity = entity.getValidity();
        if (validity != null) {
            stmt.bindString(7, validity);
        }
 
        Boolean f_claimed = entity.getF_claimed();
        if (f_claimed != null) {
            stmt.bindLong(8, f_claimed ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DealClaimed readEntity(Cursor cursor, int offset) {
        DealClaimed entity = new DealClaimed( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // deal_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // created_at
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // consumed_at
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // merchant_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // organization_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // validity
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // f_claimed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DealClaimed entity, int offset) {
        entity.setDeal_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreated_at(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setConsumed_at(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMerchant_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOrganization_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setValidity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setF_claimed(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DealClaimed entity, long rowId) {
        entity.setDeal_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DealClaimed entity) {
        if(entity != null) {
            return entity.getDeal_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
