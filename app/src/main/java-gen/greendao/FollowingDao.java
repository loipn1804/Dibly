package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Following;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOLLOWING.
*/
public class FollowingDao extends AbstractDao<Following, Long> {

    public static final String TABLENAME = "FOLLOWING";

    /**
     * Properties of entity Following.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Merchant_id = new Property(1, Long.class, "merchant_id", false, "MERCHANT_ID");
        public final static Property Merchant_name = new Property(2, String.class, "merchant_name", false, "MERCHANT_NAME");
        public final static Property Num_of_new_deals = new Property(3, Integer.class, "num_of_new_deals", false, "NUM_OF_NEW_DEALS");
        public final static Property Logo_image_url = new Property(4, String.class, "logo_image_url", false, "LOGO_IMAGE_URL");
        public final static Property Cover_image_url = new Property(5, String.class, "cover_image_url", false, "COVER_IMAGE_URL");
    };


    public FollowingDao(DaoConfig config) {
        super(config);
    }
    
    public FollowingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOLLOWING' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MERCHANT_ID' INTEGER," + // 1: merchant_id
                "'MERCHANT_NAME' TEXT," + // 2: merchant_name
                "'NUM_OF_NEW_DEALS' INTEGER," + // 3: num_of_new_deals
                "'LOGO_IMAGE_URL' TEXT," + // 4: logo_image_url
                "'COVER_IMAGE_URL' TEXT);"); // 5: cover_image_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOLLOWING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Following entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(2, merchant_id);
        }
 
        String merchant_name = entity.getMerchant_name();
        if (merchant_name != null) {
            stmt.bindString(3, merchant_name);
        }
 
        Integer num_of_new_deals = entity.getNum_of_new_deals();
        if (num_of_new_deals != null) {
            stmt.bindLong(4, num_of_new_deals);
        }
 
        String logo_image_url = entity.getLogo_image_url();
        if (logo_image_url != null) {
            stmt.bindString(5, logo_image_url);
        }
 
        String cover_image_url = entity.getCover_image_url();
        if (cover_image_url != null) {
            stmt.bindString(6, cover_image_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Following readEntity(Cursor cursor, int offset) {
        Following entity = new Following( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // merchant_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // merchant_name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // num_of_new_deals
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo_image_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // cover_image_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Following entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMerchant_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMerchant_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum_of_new_deals(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLogo_image_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCover_image_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Following entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Following entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
