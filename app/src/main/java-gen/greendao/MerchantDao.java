package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Merchant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MERCHANT.
*/
public class MerchantDao extends AbstractDao<Merchant, Long> {

    public static final String TABLENAME = "MERCHANT";

    /**
     * Properties of entity Merchant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Merchant_id = new Property(0, Long.class, "merchant_id", true, "MERCHANT_ID");
        public final static Property First_name = new Property(1, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(2, String.class, "last_name", false, "LAST_NAME");
        public final static Property Organization_name = new Property(3, String.class, "organization_name", false, "ORGANIZATION_NAME");
        public final static Property Industry_type_id = new Property(4, Integer.class, "industry_type_id", false, "INDUSTRY_TYPE_ID");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Tags = new Property(6, String.class, "tags", false, "TAGS");
        public final static Property Logo_image = new Property(7, String.class, "logo_image", false, "LOGO_IMAGE");
        public final static Property K_follows = new Property(8, Integer.class, "k_follows", false, "K_FOLLOWS");
        public final static Property K_likes = new Property(9, Integer.class, "k_likes", false, "K_LIKES");
        public final static Property K_unlikes = new Property(10, Integer.class, "k_unlikes", false, "K_UNLIKES");
        public final static Property K_outlets = new Property(11, Integer.class, "k_outlets", false, "K_OUTLETS");
        public final static Property F_yay = new Property(12, Boolean.class, "f_yay", false, "F_YAY");
        public final static Property F_nay = new Property(13, Boolean.class, "f_nay", false, "F_NAY");
        public final static Property F_follow = new Property(14, Boolean.class, "f_follow", false, "F_FOLLOW");
        public final static Property Profile_images = new Property(15, String.class, "profile_images", false, "PROFILE_IMAGES");
        public final static Property Live_deals = new Property(16, Integer.class, "live_deals", false, "LIVE_DEALS");
        public final static Property Past_deals = new Property(17, Integer.class, "past_deals", false, "PAST_DEALS");
        public final static Property Website_url = new Property(18, String.class, "website_url", false, "WEBSITE_URL");
        public final static Property Facebook_url = new Property(19, String.class, "facebook_url", false, "FACEBOOK_URL");
        public final static Property Twitter_url = new Property(20, String.class, "twitter_url", false, "TWITTER_URL");
        public final static Property Instagram_url = new Property(21, String.class, "instagram_url", false, "INSTAGRAM_URL");
        public final static Property Description = new Property(22, String.class, "description", false, "DESCRIPTION");
        public final static Property Cover_image = new Property(23, String.class, "cover_image", false, "COVER_IMAGE");
    };


    public MerchantDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MERCHANT' (" + //
                "'MERCHANT_ID' INTEGER PRIMARY KEY ," + // 0: merchant_id
                "'FIRST_NAME' TEXT," + // 1: first_name
                "'LAST_NAME' TEXT," + // 2: last_name
                "'ORGANIZATION_NAME' TEXT," + // 3: organization_name
                "'INDUSTRY_TYPE_ID' INTEGER," + // 4: industry_type_id
                "'PHONE' TEXT," + // 5: phone
                "'TAGS' TEXT," + // 6: tags
                "'LOGO_IMAGE' TEXT," + // 7: logo_image
                "'K_FOLLOWS' INTEGER," + // 8: k_follows
                "'K_LIKES' INTEGER," + // 9: k_likes
                "'K_UNLIKES' INTEGER," + // 10: k_unlikes
                "'K_OUTLETS' INTEGER," + // 11: k_outlets
                "'F_YAY' INTEGER," + // 12: f_yay
                "'F_NAY' INTEGER," + // 13: f_nay
                "'F_FOLLOW' INTEGER," + // 14: f_follow
                "'PROFILE_IMAGES' TEXT," + // 15: profile_images
                "'LIVE_DEALS' INTEGER," + // 16: live_deals
                "'PAST_DEALS' INTEGER," + // 17: past_deals
                "'WEBSITE_URL' TEXT," + // 18: website_url
                "'FACEBOOK_URL' TEXT," + // 19: facebook_url
                "'TWITTER_URL' TEXT," + // 20: twitter_url
                "'INSTAGRAM_URL' TEXT," + // 21: instagram_url
                "'DESCRIPTION' TEXT," + // 22: description
                "'COVER_IMAGE' TEXT);"); // 23: cover_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MERCHANT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Merchant entity) {
        stmt.clearBindings();
 
        Long merchant_id = entity.getMerchant_id();
        if (merchant_id != null) {
            stmt.bindLong(1, merchant_id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(2, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(3, last_name);
        }
 
        String organization_name = entity.getOrganization_name();
        if (organization_name != null) {
            stmt.bindString(4, organization_name);
        }
 
        Integer industry_type_id = entity.getIndustry_type_id();
        if (industry_type_id != null) {
            stmt.bindLong(5, industry_type_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(7, tags);
        }
 
        String logo_image = entity.getLogo_image();
        if (logo_image != null) {
            stmt.bindString(8, logo_image);
        }
 
        Integer k_follows = entity.getK_follows();
        if (k_follows != null) {
            stmt.bindLong(9, k_follows);
        }
 
        Integer k_likes = entity.getK_likes();
        if (k_likes != null) {
            stmt.bindLong(10, k_likes);
        }
 
        Integer k_unlikes = entity.getK_unlikes();
        if (k_unlikes != null) {
            stmt.bindLong(11, k_unlikes);
        }
 
        Integer k_outlets = entity.getK_outlets();
        if (k_outlets != null) {
            stmt.bindLong(12, k_outlets);
        }
 
        Boolean f_yay = entity.getF_yay();
        if (f_yay != null) {
            stmt.bindLong(13, f_yay ? 1l: 0l);
        }
 
        Boolean f_nay = entity.getF_nay();
        if (f_nay != null) {
            stmt.bindLong(14, f_nay ? 1l: 0l);
        }
 
        Boolean f_follow = entity.getF_follow();
        if (f_follow != null) {
            stmt.bindLong(15, f_follow ? 1l: 0l);
        }
 
        String profile_images = entity.getProfile_images();
        if (profile_images != null) {
            stmt.bindString(16, profile_images);
        }
 
        Integer live_deals = entity.getLive_deals();
        if (live_deals != null) {
            stmt.bindLong(17, live_deals);
        }
 
        Integer past_deals = entity.getPast_deals();
        if (past_deals != null) {
            stmt.bindLong(18, past_deals);
        }
 
        String website_url = entity.getWebsite_url();
        if (website_url != null) {
            stmt.bindString(19, website_url);
        }
 
        String facebook_url = entity.getFacebook_url();
        if (facebook_url != null) {
            stmt.bindString(20, facebook_url);
        }
 
        String twitter_url = entity.getTwitter_url();
        if (twitter_url != null) {
            stmt.bindString(21, twitter_url);
        }
 
        String instagram_url = entity.getInstagram_url();
        if (instagram_url != null) {
            stmt.bindString(22, instagram_url);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(23, description);
        }
 
        String cover_image = entity.getCover_image();
        if (cover_image != null) {
            stmt.bindString(24, cover_image);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Merchant readEntity(Cursor cursor, int offset) {
        Merchant entity = new Merchant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // merchant_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // first_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // last_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // organization_name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // industry_type_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tags
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // logo_image
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // k_follows
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // k_likes
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // k_unlikes
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // k_outlets
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // f_yay
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // f_nay
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // f_follow
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // profile_images
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // live_deals
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // past_deals
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // website_url
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // facebook_url
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // twitter_url
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // instagram_url
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // description
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // cover_image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Merchant entity, int offset) {
        entity.setMerchant_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirst_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLast_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrganization_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndustry_type_id(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTags(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLogo_image(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setK_follows(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setK_likes(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setK_unlikes(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setK_outlets(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setF_yay(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setF_nay(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setF_follow(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setProfile_images(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLive_deals(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setPast_deals(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setWebsite_url(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFacebook_url(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTwitter_url(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setInstagram_url(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDescription(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCover_image(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Merchant entity, long rowId) {
        entity.setMerchant_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Merchant entity) {
        if(entity != null) {
            return entity.getMerchant_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
