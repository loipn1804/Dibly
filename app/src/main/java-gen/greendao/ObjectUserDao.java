package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.ObjectUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_USER.
*/
public class ObjectUserDao extends AbstractDao<ObjectUser, Long> {

    public static final String TABLENAME = "OBJECT_USER";

    /**
     * Properties of entity ObjectUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, Long.class, "user_id", true, "USER_ID");
        public final static Property Group_id = new Property(1, Long.class, "group_id", false, "GROUP_ID");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property IsConsumer = new Property(3, Boolean.class, "isConsumer", false, "IS_CONSUMER");
        public final static Property Consumer_id = new Property(4, Long.class, "consumer_id", false, "CONSUMER_ID");
        public final static Property First_name = new Property(5, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(6, String.class, "last_name", false, "LAST_NAME");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property PhoneCode = new Property(8, String.class, "phoneCode", false, "PHONE_CODE");
        public final static Property Gender = new Property(9, String.class, "gender", false, "GENDER");
        public final static Property Profile_image = new Property(10, String.class, "profile_image", false, "PROFILE_IMAGE");
        public final static Property Facebook_id = new Property(11, String.class, "facebook_id", false, "FACEBOOK_ID");
        public final static Property Dob = new Property(12, String.class, "dob", false, "DOB");
        public final static Property K_following = new Property(13, Integer.class, "k_following", false, "K_FOLLOWING");
        public final static Property K_call_dibs = new Property(14, Integer.class, "k_call_dibs", false, "K_CALL_DIBS");
        public final static Property Full_name = new Property(15, String.class, "full_name", false, "FULL_NAME");
        public final static Property Ref_code = new Property(16, String.class, "ref_code", false, "REF_CODE");
        public final static Property F_verified_phone = new Property(17, Integer.class, "f_verified_phone", false, "F_VERIFIED_PHONE");
        public final static Property K_ref_bonus = new Property(18, Integer.class, "k_ref_bonus", false, "K_REF_BONUS");
        public final static Property K_ref_user = new Property(19, Integer.class, "k_ref_user", false, "K_REF_USER");
        public final static Property F_valid = new Property(20, Integer.class, "f_valid", false, "F_VALID");
    };


    public ObjectUserDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_USER' (" + //
                "'USER_ID' INTEGER PRIMARY KEY ," + // 0: user_id
                "'GROUP_ID' INTEGER," + // 1: group_id
                "'EMAIL' TEXT," + // 2: email
                "'IS_CONSUMER' INTEGER," + // 3: isConsumer
                "'CONSUMER_ID' INTEGER," + // 4: consumer_id
                "'FIRST_NAME' TEXT," + // 5: first_name
                "'LAST_NAME' TEXT," + // 6: last_name
                "'PHONE' TEXT," + // 7: phone
                "'PHONE_CODE' TEXT," + // 8: phoneCode
                "'GENDER' TEXT," + // 9: gender
                "'PROFILE_IMAGE' TEXT," + // 10: profile_image
                "'FACEBOOK_ID' TEXT," + // 11: facebook_id
                "'DOB' TEXT," + // 12: dob
                "'K_FOLLOWING' INTEGER," + // 13: k_following
                "'K_CALL_DIBS' INTEGER," + // 14: k_call_dibs
                "'FULL_NAME' TEXT," + // 15: full_name
                "'REF_CODE' TEXT," + // 16: ref_code
                "'F_VERIFIED_PHONE' INTEGER," + // 17: f_verified_phone
                "'K_REF_BONUS' INTEGER," + // 18: k_ref_bonus
                "'K_REF_USER' INTEGER," + // 19: k_ref_user
                "'F_VALID' INTEGER);"); // 20: f_valid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectUser entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        Long group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindLong(2, group_id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        Boolean isConsumer = entity.getIsConsumer();
        if (isConsumer != null) {
            stmt.bindLong(4, isConsumer ? 1l: 0l);
        }
 
        Long consumer_id = entity.getConsumer_id();
        if (consumer_id != null) {
            stmt.bindLong(5, consumer_id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(6, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(7, last_name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String phoneCode = entity.getPhoneCode();
        if (phoneCode != null) {
            stmt.bindString(9, phoneCode);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(10, gender);
        }
 
        String profile_image = entity.getProfile_image();
        if (profile_image != null) {
            stmt.bindString(11, profile_image);
        }
 
        String facebook_id = entity.getFacebook_id();
        if (facebook_id != null) {
            stmt.bindString(12, facebook_id);
        }
 
        String dob = entity.getDob();
        if (dob != null) {
            stmt.bindString(13, dob);
        }
 
        Integer k_following = entity.getK_following();
        if (k_following != null) {
            stmt.bindLong(14, k_following);
        }
 
        Integer k_call_dibs = entity.getK_call_dibs();
        if (k_call_dibs != null) {
            stmt.bindLong(15, k_call_dibs);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(16, full_name);
        }
 
        String ref_code = entity.getRef_code();
        if (ref_code != null) {
            stmt.bindString(17, ref_code);
        }
 
        Integer f_verified_phone = entity.getF_verified_phone();
        if (f_verified_phone != null) {
            stmt.bindLong(18, f_verified_phone);
        }
 
        Integer k_ref_bonus = entity.getK_ref_bonus();
        if (k_ref_bonus != null) {
            stmt.bindLong(19, k_ref_bonus);
        }
 
        Integer k_ref_user = entity.getK_ref_user();
        if (k_ref_user != null) {
            stmt.bindLong(20, k_ref_user);
        }
 
        Integer f_valid = entity.getF_valid();
        if (f_valid != null) {
            stmt.bindLong(21, f_valid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectUser readEntity(Cursor cursor, int offset) {
        ObjectUser entity = new ObjectUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // group_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isConsumer
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // consumer_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // first_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // last_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phoneCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gender
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // profile_image
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // facebook_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dob
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // k_following
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // k_call_dibs
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // full_name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ref_code
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // f_verified_phone
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // k_ref_bonus
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // k_ref_user
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20) // f_valid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectUser entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsConsumer(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setConsumer_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setFirst_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLast_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoneCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGender(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProfile_image(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFacebook_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDob(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setK_following(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setK_call_dibs(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setFull_name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRef_code(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setF_verified_phone(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setK_ref_bonus(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setK_ref_user(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setF_valid(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectUser entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectUser entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
